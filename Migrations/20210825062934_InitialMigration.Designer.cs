// <auto-generated />
using System;
using BackEnd.DbConfig;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BackEnd.Migrations
{
    [DbContext(typeof(BackEndContext))]
    [Migration("20210825062934_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BackEnd.Models.Authors", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasMaxLength(100);

                    b.HasKey("id");

                    b.ToTable("authors");
                });

            modelBuilder.Entity("BackEnd.Models.Books", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<string>("authorId")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<string>("genreId")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<double>("price")
                        .HasColumnType("FLOAT");

                    b.Property<long>("quantity")
                        .HasColumnType("BIGINT");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.HasIndex("authorId");

                    b.HasIndex("genreId");

                    b.ToTable("books");
                });

            modelBuilder.Entity("BackEnd.Models.Generous", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasMaxLength(100);

                    b.HasKey("id");

                    b.ToTable("generous");
                });

            modelBuilder.Entity("BackEnd.Models.Movement", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<string>("bookId")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("dateCreated")
                        .IsRequired()
                        .HasColumnType("DATETIME");

                    b.Property<string>("operation")
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<long>("quantity")
                        .HasColumnType("BIGINT");

                    b.Property<double>("value")
                        .HasColumnType("FLOAT");

                    b.HasKey("id");

                    b.HasIndex("bookId");

                    b.ToTable("movement");
                });

            modelBuilder.Entity("BackEnd.Models.OrderBooks", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<string>("bookId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("orderDate")
                        .IsRequired()
                        .HasColumnType("DATETIME");

                    b.Property<long>("orderQuantity")
                        .HasColumnType("BIGINT");

                    b.Property<string>("status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasMaxLength(50)
                        .HasDefaultValue("In process");

                    b.HasKey("id");

                    b.HasIndex("bookId");

                    b.ToTable("orderBooks");
                });

            modelBuilder.Entity("BackEnd.Models.Users", b =>
                {
                    b.Property<string>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("VARCHAR(50)")
                        .HasDefaultValueSql("(newid())")
                        .HasMaxLength(50);

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasMaxLength(100);

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasMaxLength(100);

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("VARCHAR(100)")
                        .HasMaxLength(100);

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("BackEnd.Models.Books", b =>
                {
                    b.HasOne("BackEnd.Models.Authors", "authors")
                        .WithMany("books")
                        .HasForeignKey("authorId");

                    b.HasOne("BackEnd.Models.Generous", "generous")
                        .WithMany("books")
                        .HasForeignKey("genreId");
                });

            modelBuilder.Entity("BackEnd.Models.Movement", b =>
                {
                    b.HasOne("BackEnd.Models.Books", "book")
                        .WithMany("movement")
                        .HasForeignKey("bookId");
                });

            modelBuilder.Entity("BackEnd.Models.OrderBooks", b =>
                {
                    b.HasOne("BackEnd.Models.Books", "books")
                        .WithMany("orderBooks")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
